from django.shortcuts import render, get_object_or_404
from django.views.generic import ListView, DetailView, TemplateView
from about_village.models import FamousPerson

from django.shortcuts import get_object_or_404
from django.views.generic import ListView
from .models import FamousPerson, CategoryPeople


class FamousPeopleAll(ListView):
    template_name = 'famous_people/famous_people_all.html'
    context_object_name = "people"
    paginate_by = 12  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    title_page = '–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ª—é–¥–∏'

    def get_queryset(self):
        queryset = FamousPerson.published.all().prefetch_related('categories')

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
        category_id = self.request.GET.get('cat')
        if category_id:
            self.cat_selected = get_object_or_404(CategoryPeople, id=category_id)
            queryset = queryset.filter(categories=self.cat_selected)
        else:
            self.cat_selected = None

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        context['all_categories'] = CategoryPeople.objects.all()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
        context['cat_selected'] = self.cat_selected

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context['title_page'] = self.title_page

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É—Ç–æ—á–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if self.cat_selected:
            context['title_page'] = f'{self.title_page} - {self.cat_selected.name}'

        return context


class PersonDetail(DetailView):
    model = FamousPerson
    template_name = 'famous_people/person_detail.html'
    slug_url_kwarg = 'person_slug'
    context_object_name = 'human'
    queryset = FamousPerson.published.all()

    def get_object(self, queryset=None):
        return get_object_or_404(FamousPerson.published, slug=self.kwargs[self.slug_url_kwarg])


class AboutVillage(TemplateView):
    template_name = 'about_village.html'
    def get(self, request, *args, **kwargs):
        context = self.get_context_data(**kwargs)
        context['famous_person'] = FamousPerson.published.all()[:3]
        return self.render_to_response(context)


class HistoryPage(TemplateView):
    template_name = 'history/history.html'
    extra_context = {"title": "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ–ª–∫–∞"}


class HistoryBookPage(TemplateView):
    template_name = 'history/history_book.html'
    extra_context = {"title": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ö—Ä–æ–Ω–∏–∫–∞ - –ù–æ–≤–∞—è –°—Ç–∞—Ä–∞—è –õ—è–¥–∞"}
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∫–Ω–∏–≥–æ–π
        import os
        from django.conf import settings
        
        # –ò—â–µ–º —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –≤ MEDIA –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ, –∑–∞—Ç–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        possible_book_paths = [
            os.path.join(settings.MEDIA_ROOT, 'book', 'assemble_book_with_images.txt'),
            os.path.join(settings.MEDIA_ROOT, 'assemble_book_with_images.txt'),
            os.path.join(settings.BASE_DIR, 'assemble_book_with_images.txt'),
            os.path.join(settings.BASE_DIR.parent, 'assemble_book_with_images.txt'),
        ]
        book_file_path = None
        for _p in possible_book_paths:
            if os.path.exists(_p):
                book_file_path = _p
                break
        
        try:
            if not book_file_path:
                raise FileNotFoundError('–§–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MEDIA –∏–ª–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞')
            with open(book_file_path, 'r', encoding='utf-8') as f:
                book_content = f.read()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            pages = book_content.split("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n–°–¢–†–ê–ù–ò–¶–ê ")
            
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–Ω–∏–≥–∏
            book_header = pages[0] if pages else ""
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            book_pages = []
            for i, page_content in enumerate(pages[1:], 1):
                lines = page_content.split('\n')
                page_number = lines[0] if lines else str(i)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_text = '\n'.join(lines[2:]) if len(lines) > 2 else ""
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images = []
                if "üì∑ **–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –≠–¢–û–ô –°–¢–†–ê–ù–ò–¶–ï:**" in page_text:
                    lines_split = page_text.split('\n')
                    collecting_images = False
                    for line in lines_split:
                        if "üì∑ **–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –≠–¢–û–ô –°–¢–†–ê–ù–ò–¶–ï:**" in line:
                            collecting_images = True
                            continue
                        elif collecting_images and line.strip() and not line.startswith('   '):
                            collecting_images = False
                        elif collecting_images and line.strip().startswith('   '):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                            if 'book_images/' in line:
                                img_path = line.split('book_images/')[-1].strip()
                                images.append(img_path)
                
                # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if "üì∑ **–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –≠–¢–û–ô –°–¢–†–ê–ù–ò–¶–ï:**" in page_text:
                    parts = page_text.split("üì∑ **–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –ù–ê –≠–¢–û–ô –°–¢–†–ê–ù–ò–¶–ï:**")
                    if len(parts) > 1:
                        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        after_images = parts[1].split('\n')
                        clean_lines = []
                        skip_images = True
                        for line in after_images:
                            if skip_images and (not line.strip() or line.startswith('   ')):
                                continue
                            else:
                                skip_images = False
                                clean_lines.append(line)
                        page_text = parts[0] + '\n'.join(clean_lines)
                
                # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:)
                lines = page_text.split('\n')
                clean_lines = []
                for line in lines:
                    if not line.strip().startswith('üìé –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
                        clean_lines.append(line)
                page_text = '\n'.join(clean_lines)
                
                book_pages.append({
                    'number': page_number,
                    'content': page_text.strip(),
                    'images': images
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ media/book
            # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤–∏–¥–∞: page_001_image_*.jpg ‚Üí —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            media_book_dir = os.path.join(settings.MEDIA_ROOT, 'book')
            page_to_images = {}
            if os.path.exists(media_book_dir):
                try:
                    for file_name in sorted(os.listdir(media_book_dir)):
                        if not file_name.lower().endswith('.jpg'):
                            continue
                        # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: page_XXX_image_YYY.jpg
                        # –ò–∑–≤–ª–µ—á—ë–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã XXX (—Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)
                        if file_name.startswith('page_') and '_image_' in file_name:
                            page_part = file_name.split('_')[1]  # '001'
                            try:
                                page_num_int = int(page_part)
                            except ValueError:
                                continue
                            page_to_images.setdefault(page_num_int, []).append(file_name)
                except Exception:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã
                    pass

            # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∫–Ω–∏–≥–∏
            for page in book_pages:
                # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —á–∏—Å–ª–æ–≤—É—é –≥—Ä—É–ø–ø—É
                import re
                match = re.search(r"(\d+)", str(page['number']))
                if match:
                    page_num_int = int(match.group(1))
                    images_for_page = page_to_images.get(page_num_int, [])
                    if images_for_page:
                        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –Ω–∞—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ ‚Äî –æ–±—ä–µ–¥–∏–Ω–∏–º —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º
                        existing = page.get('images') or []
                        merged = sorted(set(existing) | set(images_for_page))
                        page['images'] = merged
                
            total_pages = len(book_pages)
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ query params
            try:
                requested_page = int(self.request.GET.get('page', '1'))
            except ValueError:
                requested_page = 1
            if requested_page < 1:
                requested_page = 1
            if total_pages and requested_page > total_pages:
                requested_page = total_pages

            # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            if total_pages > 0:
                current_page = book_pages[requested_page - 1]
            else:
                current_page = {'number': 1, 'content': '', 'images': []}

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            has_prev = requested_page > 1
            has_next = total_pages and requested_page < total_pages
            prev_page = requested_page - 1 if has_prev else None
            next_page = requested_page + 1 if has_next else None

            context['book_header'] = book_header
            context['current_page'] = current_page
            context['current_page_index'] = requested_page
            context['total_pages'] = total_pages
            context['has_prev'] = has_prev
            context['has_next'] = has_next
            context['prev_page'] = prev_page
            context['next_page'] = next_page
            
        except FileNotFoundError:
            context['error'] = "–§–∞–π–ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            context['current_page'] = None
            context['total_pages'] = 0
        except Exception as e:
            context['error'] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏: {str(e)}"
            context['current_page'] = None
            context['total_pages'] = 0
        
        return context


class DebugImagesPage(TemplateView):
    template_name = 'history/debug_images.html'
    extra_context = {"title": "–û—Ç–ª–∞–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"}
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        import os
        from django.conf import settings
        
        static_images_path = os.path.join(settings.BASE_DIR, 'static', 'images', 'book')
        media_images_path = os.path.join(settings.BASE_DIR, 'media', 'book_images')
        
        context['static_path_exists'] = os.path.exists(static_images_path)
        context['media_path_exists'] = os.path.exists(media_images_path)
        
        if context['static_path_exists']:
            context['static_images_count'] = len([f for f in os.listdir(static_images_path) if f.endswith('.jpg')])
            context['static_sample_images'] = sorted([f for f in os.listdir(static_images_path) if f.endswith('.jpg')])[:5]
        else:
            context['static_images_count'] = 0
            context['static_sample_images'] = []
            
        if context['media_path_exists']:
            context['media_images_count'] = len([f for f in os.listdir(media_images_path) if f.endswith('.jpg')])
            context['media_sample_images'] = sorted([f for f in os.listdir(media_images_path) if f.endswith('.jpg')])[:5]
        else:
            context['media_images_count'] = 0
            context['media_sample_images'] = []
        
        return context


from django.http import HttpResponse, Http404
from django.conf import settings

def serve_book_image(request, image_name):
    """
    –ü–æ–¥–∞—á–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–Ω–∏–≥–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    """
    import os
    import mimetypes
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ static –∏ media –ø–∞–ø–∫–∞—Ö
    possible_paths = [
        os.path.join(settings.BASE_DIR, 'static', 'images', 'book', image_name),
        os.path.join(settings.MEDIA_ROOT, 'book', image_name),  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–Ω–∏–≥–∏
        os.path.join(settings.BASE_DIR, 'media', 'book', image_name),  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        os.path.join(settings.BASE_DIR.parent, 'book', image_name),  # –í–æ–∑–º–æ–∂–Ω–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
        os.path.join(settings.BASE_DIR, 'media', 'book_images', image_name),  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –ø—É—Ç—ë–º
        os.path.join(settings.BASE_DIR.parent, 'book_images', image_name),  # –°—Ç–∞—Ä—ã–π –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å
    ]
    
    for image_path in possible_paths:
        if os.path.exists(image_path):
            try:
                with open(image_path, 'rb') as f:
                    image_data = f.read()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
                content_type, _ = mimetypes.guess_type(image_path)
                if not content_type:
                    content_type = 'image/jpeg'
                
                response = HttpResponse(image_data, content_type=content_type)
                response['Content-Length'] = len(image_data)
                return response
                
            except Exception as e:
                continue
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    raise Http404(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")