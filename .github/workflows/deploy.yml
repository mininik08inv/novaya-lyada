name: Deploy to Production

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        env:
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: 0
          DB_HOST: localhost
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_PORT: 5432
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/1
        run: |
          uv run python manage.py collectstatic --noinput
          uv run python manage.py migrate --noinput
          uv run python manage.py check --deploy

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT || 22 }}
          script: |
            # Переходим в директорию проекта
            cd /opt/novaya-lyada

            # Логинимся в GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Обновляем образ
            export IMAGE_TAG="${{ needs.build.outputs.image }}"
            
            # Создаем резервную копию базы данных
            docker compose exec -T db pg_dump -U postgres novaya_lyada > ./backups/backup_$(date +%Y%m%d_%H%M%S).sql

            # Останавливаем старые контейнеры
            docker compose down

            # Подтягиваем новый образ
            docker pull $IMAGE_TAG

            # Обновляем docker-compose.yml с новым образом
            sed -i "s|build: \.|image: $IMAGE_TAG|g" docker-compose.yml

            # Запускаем новые контейнеры
            docker compose up -d

            # Проверяем статус
            docker compose ps

            # Очищаем старые образы
            docker image prune -f

            # Ждем готовности приложения
            echo "Waiting for application to start..."
            for i in {1..30}; do
              if curl -f http://localhost:8000/ > /dev/null 2>&1; then
                echo "Application is ready!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 10
            done

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
